#include <stdio.h>
#include <string.h>

const char* arr[] = {"postmalon", "giveon", "kanyewest", "dean", "danielcasear", "blackskirt", "nell", "dprian", "crush", "cjamm", "offonoff"};


int compare(const char* p1, const char* p2)
{
    while (1)
    {
        if (*p1 != *p2)             //n 번째 문자가 다를때 왼쪽이 더 크면 -1을 반환, 오른쪽이 더 크면 1을 반환
            return *p1 > *p2 ? -1 : 1;
        else if (*p1 == '\0' && *p2 == '\0')    //끝까지 비교해도 단어가 같다면 0을 반환
            return 0;
        p1++;
        p2++;
    }
}

void AscendingInsertionSort()
{
    const char* temp;
    int i, j;
    for (i = 1; i < sizeof(arr) / sizeof(const char*); i++)
    {
        temp = arr[i];
        for (j = i - 1; j >= 0 && compare(temp, arr[j]) == 1; j--)    //arr[j]이 더 큰 경우에 삽입을 시작한다
        {
            arr[j + 1] = arr[j];
        }
        arr[j + 1] = temp;
    }
}

void DescendingInsertionSort()
{
    const char* temp;
    int i, j;
    for (i = 1; i < sizeof(arr) / sizeof(const char*); i++)
    {
        temp = arr[i];
        for (j = i - 1; j >= 0 && compare(temp, arr[j]) == -1; j--)     //temp가 더 큰 경우에 삽입을 시작한다
        {
            arr[j + 1] = arr[j];
        }
        arr[j + 1] = temp;
    }
}

void AscendingBubbleSort()
{
    const char* temp;
    int i, j;
    for (i = 0; i < sizeof(arr) / sizeof(const char*) - 1; i++)
    {
        for (j = 0; j < sizeof(arr) / sizeof(const char*) - 1; j++)
        {
            if (compare(arr[j], arr[j + 1]) == -1)      //arr[j]가 더 큰 경우에 값을 서로 바꾸어준다
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void DescendingBubbleSort()
{
    const char* temp;
    int i, j;
    for (i = 0; i < sizeof(arr) / sizeof(const char*) - 1; i++)
    {
        for (j = 0; j < sizeof(arr) / sizeof(const char*) - 1; j++)
        {
            if (compare(arr[j], arr[j + 1]) == 1)       //arr[j + 1]가 더 큰 경우에 값을 서로 바꾸어준다
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void prInsertion()
{
    printf("INSERTION SORT\n");
    printf("------------------------------------------\n");     
    printf("[Input String] : ");
    for (int i = 0; i < sizeof(arr) / sizeof(const char*); i++)         //sizeof(arr) / sizeof(const char*)
    {                                                                   //를 사용하여 배열의 크기 지정
        if (arr[i + 1] == '\0')                     //마지막 단어 뒤에 ','가 찍히지 않도록 한다
            printf("%s ", arr[i]);
        else
            printf("%s, ", arr[i]);
    }

    printf("\n[Ascending order] ：");
    AscendingInsertionSort();
    for (int i = 0; i < sizeof(arr) / sizeof(const char*); i++)
    {
        if (arr[i + 1] == '\0')
            printf("%s ", arr[i]);
        else
            printf("%s, ", arr[i]);
    }
    
    printf("\n[Descending order] : ");
    DescendingInsertionSort();
    for (int i = 0; i < sizeof(arr) / sizeof(const char*); i++)
    {
        if (arr[i + 1] == '\0')
            printf("%s ", arr[i]);
        else
            printf("%s, ", arr[i]);
    }
    printf("\n------------------------------------------\n");
    printf("Press “Enter” to quit the program... : ");
    getchar();
}

void prBubble()
{
    printf("BUBBLE SORT\n");
    printf("------------------------------------------\n");
    printf("[Input String] : ");
    for (int i = 0; i < sizeof(arr) / sizeof(const char*); i++)     //sizeof(arr) / sizeof(const char*)
    {                                                               //를 사용하여 배열의 크기 지정
        if (arr[i + 1] == '\0')                     //마지막 단어 뒤에 ','가 찍히지 않도록 한다
            printf("%s ", arr[i]);                  
        else
            printf("%s, ", arr[i]);
    }

    printf("\n[Ascending order] ：");
    AscendingBubbleSort();
    for (int i = 0; i < sizeof(arr) / sizeof(const char*); i++)
    {
        if (arr[i + 1] == '\0')
            printf("%s ", arr[i]);
        else
            printf("%s, ", arr[i]);
    }

    printf("\n[Descending order] : ");
    DescendingBubbleSort();
    for (int i = 0; i < sizeof(arr) / sizeof(const char*); i++)
    {
        if (arr[i + 1] == '\0')
            printf("%s ", arr[i]);
        else
            printf("%s, ", arr[i]);
    }
    printf("\n------------------------------------------\n");
    printf("Press “Enter” to quit the program... : ");
    getchar();
}

int main()
{
    prInsertion();
    prBubble();

    return 0;
}
